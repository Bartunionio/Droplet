// <auto-generated />
using System;
using Droplet.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Droplet.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DoctorHospital", b =>
                {
                    b.Property<int>("DoctorsId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalsId")
                        .HasColumnType("int");

                    b.HasKey("DoctorsId", "HospitalsId");

                    b.HasIndex("HospitalsId");

                    b.ToTable("DoctorHospital", (string)null);
                });

            modelBuilder.Entity("Droplet.Models.Entities.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("IdDonor")
                        .HasColumnType("int");

                    b.Property<int?>("IdTransfusion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdDonor");

                    b.HasIndex("IdTransfusion");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("Droplet.Models.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PESEL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "John",
                            LastName = "Doe",
                            PESEL = "90060184361"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Jane",
                            LastName = "Doe",
                            PESEL = "94110926169"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Alice",
                            LastName = "Smith",
                            PESEL = "99061937114"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Bob",
                            LastName = "Johnson",
                            PESEL = "56051657197"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Charlie",
                            LastName = "Brown",
                            PESEL = "84101422862"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Dave",
                            LastName = "Wilson",
                            PESEL = "96110262292"
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "Eve",
                            LastName = "Davis",
                            PESEL = "62030165469"
                        },
                        new
                        {
                            Id = 8,
                            FirstName = "Frank",
                            LastName = "Miller",
                            PESEL = "72061521868"
                        });
                });

            modelBuilder.Entity("Droplet.Models.Entities.Donor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PESEL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Donors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BloodType = 3,
                            FirstName = "Frank",
                            LastName = "Miller",
                            PESEL = "78011762657"
                        },
                        new
                        {
                            Id = 2,
                            BloodType = 5,
                            FirstName = "Grace",
                            LastName = "Adams",
                            PESEL = "58031151389"
                        },
                        new
                        {
                            Id = 3,
                            BloodType = 7,
                            FirstName = "Hank",
                            LastName = "Baker",
                            PESEL = "63082969285"
                        },
                        new
                        {
                            Id = 4,
                            BloodType = 2,
                            FirstName = "Ivy",
                            LastName = "Clark",
                            PESEL = "71021617898"
                        },
                        new
                        {
                            Id = 5,
                            BloodType = 1,
                            FirstName = "Jack",
                            LastName = "Evans",
                            PESEL = "61020226252"
                        },
                        new
                        {
                            Id = 6,
                            BloodType = 0,
                            FirstName = "Kate",
                            LastName = "Fisher",
                            PESEL = "60042994741"
                        },
                        new
                        {
                            Id = 7,
                            BloodType = 6,
                            FirstName = "Leo",
                            LastName = "Garcia",
                            PESEL = "64082237664"
                        },
                        new
                        {
                            Id = 8,
                            BloodType = 4,
                            FirstName = "Mia",
                            LastName = "Harris",
                            PESEL = "70070919982"
                        },
                        new
                        {
                            Id = 9,
                            BloodType = 2,
                            FirstName = "Nina",
                            LastName = "Ivanov",
                            PESEL = "83100453712"
                        },
                        new
                        {
                            Id = 10,
                            BloodType = 0,
                            FirstName = "Oscar",
                            LastName = "Jones",
                            PESEL = "70011425996"
                        },
                        new
                        {
                            Id = 11,
                            BloodType = 5,
                            FirstName = "Paul",
                            LastName = "Kim",
                            PESEL = "90071459573"
                        },
                        new
                        {
                            Id = 12,
                            BloodType = 7,
                            FirstName = "Quinn",
                            LastName = "Lopez",
                            PESEL = "80082622961"
                        },
                        new
                        {
                            Id = 13,
                            BloodType = 1,
                            FirstName = "Rose",
                            LastName = "Martinez",
                            PESEL = "96110619575"
                        });
                });

            modelBuilder.Entity("Droplet.Models.Entities.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "137",
                            Name = "Central Clinical Hospital of the Ministry of the Interior and Administration",
                            PostalCode = "02-507",
                            Street = "Wołoska"
                        },
                        new
                        {
                            Id = 2,
                            Address = "80",
                            Name = "John Paul II Hospital",
                            PostalCode = "31-202",
                            Street = "Prądnicka"
                        },
                        new
                        {
                            Id = 3,
                            Address = "7",
                            Name = "University Clinical Center",
                            PostalCode = "80-211",
                            Street = "Dębinki"
                        },
                        new
                        {
                            Id = 4,
                            Address = "20",
                            Name = "Children's Memorial Health Institute",
                            PostalCode = "04-730",
                            Street = "Aleja Dzieci Polskich"
                        },
                        new
                        {
                            Id = 5,
                            Address = "62",
                            Name = "Wielkopolska Center of Pulmonology and Thoracic Surgery",
                            PostalCode = "60-569",
                            Street = "Szamarzewskiego"
                        },
                        new
                        {
                            Id = 6,
                            Address = "1a",
                            Name = "Independent Public Central Clinical Hospital",
                            PostalCode = "02-097",
                            Street = "Banacha"
                        });
                });

            modelBuilder.Entity("Droplet.Models.Entities.Recipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PESEL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Recipients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BloodType = 7,
                            FirstName = "Sam",
                            LastName = "Nelson",
                            PESEL = "73040165268"
                        },
                        new
                        {
                            Id = 2,
                            BloodType = 2,
                            FirstName = "Tina",
                            LastName = "O'Neill",
                            PESEL = "74071689484"
                        },
                        new
                        {
                            Id = 3,
                            BloodType = 1,
                            FirstName = "Uma",
                            LastName = "Perez",
                            PESEL = "90102796295"
                        },
                        new
                        {
                            Id = 4,
                            BloodType = 0,
                            FirstName = "Victor",
                            LastName = "Quinn",
                            PESEL = "65110111691"
                        },
                        new
                        {
                            Id = 5,
                            BloodType = 6,
                            FirstName = "Wendy",
                            LastName = "Reed",
                            PESEL = "71102928565"
                        },
                        new
                        {
                            Id = 6,
                            BloodType = 4,
                            FirstName = "Xander",
                            LastName = "Sanchez",
                            PESEL = "93100227217"
                        },
                        new
                        {
                            Id = 7,
                            BloodType = 2,
                            FirstName = "Yara",
                            LastName = "Thomas",
                            PESEL = "97120413337"
                        });
                });

            modelBuilder.Entity("Droplet.Models.Entities.Transfusion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int>("IdHospital")
                        .HasColumnType("int");

                    b.Property<int>("IdRecipient")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdHospital");

                    b.HasIndex("IdRecipient");

                    b.ToTable("Transfusions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DoctorHospital", b =>
                {
                    b.HasOne("Droplet.Models.Entities.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Droplet.Models.Entities.Hospital", null)
                        .WithMany()
                        .HasForeignKey("HospitalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Droplet.Models.Entities.Bank", b =>
                {
                    b.HasOne("Droplet.Models.Entities.Donor", "Donor")
                        .WithMany("Donations")
                        .HasForeignKey("IdDonor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Droplet.Models.Entities.Transfusion", "Transfusion")
                        .WithMany("BloodUsed")
                        .HasForeignKey("IdTransfusion")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Donor");

                    b.Navigation("Transfusion");
                });

            modelBuilder.Entity("Droplet.Models.Entities.Transfusion", b =>
                {
                    b.HasOne("Droplet.Models.Entities.Doctor", "Doctor")
                        .WithMany("Transfusions")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Droplet.Models.Entities.Hospital", "Hospital")
                        .WithMany("Transfusions")
                        .HasForeignKey("IdHospital")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Droplet.Models.Entities.Recipient", "Recipient")
                        .WithMany("Transfusions")
                        .HasForeignKey("IdRecipient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Hospital");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Droplet.Models.Entities.Doctor", b =>
                {
                    b.Navigation("Transfusions");
                });

            modelBuilder.Entity("Droplet.Models.Entities.Donor", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("Droplet.Models.Entities.Hospital", b =>
                {
                    b.Navigation("Transfusions");
                });

            modelBuilder.Entity("Droplet.Models.Entities.Recipient", b =>
                {
                    b.Navigation("Transfusions");
                });

            modelBuilder.Entity("Droplet.Models.Entities.Transfusion", b =>
                {
                    b.Navigation("BloodUsed");
                });
#pragma warning restore 612, 618
        }
    }
}
